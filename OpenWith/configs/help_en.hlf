.Language=English,English
.PluginContents=OpenWith

@Contents
$^#OpenWith plugin#
$^#Version 1.0#
$^#Copyright (C) 2025 spnethw#
$^#Contents#
 The #OpenWith# plugin provides a context-aware menu to open the currently selected file(s) with an appropriate application. It intelligently detects the file type and queries the operating system for a list of registered applications that can handle it. If multiple files are selected, the plugin finds common applications that are registered to handle all of them by intersecting the candidate lists for each file. The plugin is cross-platform and uses native OS mechanisms to provide accurate and relevant application choices: on Linux/BSD, it adheres to XDG standards for MIME types and application discovery, while on macOS, it integrates with the Launch Services framework.

 After invoking the plugin on a file, a menu is displayed with a list of suitable applications. The user can then select an application to launch, or press #F3# to view detailed information about the file and the selected application.

   ~Configuration Dialog (F9)~@ConfigurationDialog@

   ~Information Dialog (F3)~@InformationDialog@

   ~Tips for use and usefulness~@Tips@

   ~Troubleshooting~@Troubleshooting@

@ConfigurationDialog
$^#OpenWith plugin#
$^#Version 1.0#
$^#Copyright (C) 2025 spnethw#
$^#Configuration Dialog#
 The configuration dialog, accessible by pressing #F9# in the application selection menu, allows you to customize the plugin's behavior. It is divided into general and platform-specific settings.

 #1. GENERAL SETTINGS#

 #-# Use external terminal for console apps
   If checked, applications that require a terminal (e.g., vim or mc) will be launched in a new external terminal window. If unchecked, they will run inside far2l's integrated terminal. Note: when multiple files are selected, this option being unchecked will cause all terminal-based applications to be hidden from the list. This is because far2l's integrated terminal cannot manage multiple concurrent application instances.

 #-# Don't wait for command completion
   If checked, GUI applications will be launched asynchronously, immediately returning control to far2l. If unchecked, far2l will wait for the launched application to close. This setting does not affect terminal applications. It may also be ignored when multiple files are opened with an application that does not support receiving them in a single command; in this case, an asynchronous launch is forced to prevent the UI from blocking.

 #-# Clear selection if command executed
   When this option is enabled the selection on the panel is cleared after exiting the menu if any menu command has been executed.


 #2. PLATFORM-SPECIFIC SETTINGS#

 #2.1. Linux/BSD Settings#

 These settings fine-tune how the plugin identifies file types and discovers applications, following the XDG specifications. The plugin gathers a list of potential MIME types for a file from all enabled sources. This list is then prioritized, and applications are ranked based on how well they match the most specific MIME types. This allows for more flexible and accurate associations than relying on a single detection method.

 #-# Use `xdg-mime` tool
   Determine the MIME type of the selected file by invoking the `xdg-mime query filetype` command. This is the standard and most recommended method. The utility queries the system's shared-mime-info database, which maps filename patterns (globs) to MIME types — the same database used by desktop environments to associate types with applications. Its results are highly compatible with the `MimeType=` entries in .desktop files. Although the utility can also inspect file contents, it primarily relies on filenames, making it susceptible to errors for files with wrong or missing extensions.

 #-# Use `file` tool
   Determine the MIME type of the selected file by invoking the `file --mime-type` command. This utility performs deep analysis of the file’s binary content using its own "magic numbers" database. It is extremely reliable and is not deceived by incorrect file extensions. However, it can be slightly slower as it requires reading the file's contents, and the MIME type names it produces may occasionally differ from the official IANA names or those in the shared-mime-info database, potentially leading to fewer application matches.

 #-# Use extension-based fallback
   As a last resort, if the above tools fail, are absent or disabled, it attempts to guess the MIME type from a built-in static map of common file extensions. This is the least reliable method and should only be used as a fallback on systems with a misconfigured or incomplete MIME database.

 #-# Load MIME type aliases
   Enables loading MIME type associations from system `aliases` files. This helps find more applications by linking a file's MIME type with its alternative names (e.g., linking "application/x-deb" to "application/vnd.debian.binary-package").

 #-# Use mimeinfo.cache
   Speed up application lookups by using the mimeinfo.cache files. These are index files, automatically maintained by the system, that create a direct mapping from a MIME type (e.g., image/png) to a list of .desktop files of applications that can handle it. Disabling this forces a slower, exhaustive scan of all .desktop files found in XDG data directories.

 #-# Filter by OnlyShowIn/NotShowIn
   Respect the `OnlyShowIn` and `NotShowIn` keys in .desktop files. This will filter the application list to show only those relevant to the current desktop environment (e.g., GNOME, KDE).

 #-# Validate TryExec field
   Before showing an application, check if the executable specified in its .desktop file's `TryExec` key exists and is runnable. This helps hide applications that are declared but not properly installed.


 #2.2. macOS Settings#

 There are no platform‑specific settings for macOS. The plugin uses the native Launch Services framework and requires no additional configuration. Launch Services centrally and automatically manages application‑to‑document bindings and maintains a database of installed apps and their Uniform Type Identifiers (UTIs); this database is updated when applications are installed or removed.

   ~Contents~@Contents@


@InformationDialog
$^#OpenWith plugin#
$^#Version 1.0#
$^#Copyright (C) 2025 spnethw#
$^#Information Dialog (F3)#
 The information dialog, accessible by pressing #F3# in the application selection menu, displays detailed technical information about the file, the highlighted application, and the exact command that will be used to launch it.

 #1. COMMON FIELDS#

 #-# Filepath
   The full, absolute path to the selected file. If multiple files are selected, this field will instead show a count of the selected files.

 #-# MIME type
   The MIME type of the file as determined by the plugin.

 #-# Launch command
   The final command line that will be executed if you press Enter.


 #2. PLATFORM-SPECIFIC INFORMATION FIELDS#

 #2.1. Linux/BSD Application Details#

 This section displays detailed information parsed from the application's .desktop file. These files are a Freedesktop.org standard, acting as shortcuts and metadata containers for applications, describing how they should be named, displayed, and executed.

 #-# Desktop file
   The full path to the .desktop file (an INI-style text file) that defines this application.

 #-# Source
   This field indicates the origin of the association, explaining why the application was suggested for the file. It clarifies whether the match came from a high-priority system default (via xdg-mime), a user preference in a mimeapps.list file, an indexed lookup in mimeinfo.cache, or a comprehensive fallback scan of all .desktop files. This information is useful for troubleshooting application associations. Note: this field is not displayed when multiple files are selected, as the association source can be different for each file.

 #-# Name
   The human-readable application name, intended for display in menus.

 #-# GenericName
   A more general description of the application's category (e.g., "Text Editor", "Web Browser").

 #-# Comment
   A longer description of the application, often used as a tooltip.

 #-# Categories
   A semicolon-separated list of categories used by the desktop environment to organize applications in menus.

 #-# Exec
   The command-line template used to launch the application. It may contain special placeholders (field codes), such as %f for a single file path, %U for a list of URLs, or %% for a literal percent sign.

 #-# TryExec
   A path to an executable. The desktop environment can check if this file exists and is executable before displaying the entry. This is used to hide menu entries for applications that are not correctly installed.

 #-# Terminal
   A boolean value (true or false) indicating whether the application must be run in a terminal window.


 #2.2. macOS Application Details#

 #-# Name
   The application's display name from its bundle information.

 #-# Location
   The full path to the application bundle (e.g., `/Applications/TextEdit.app`).

 #-# Executable
   The name of the main executable file inside the application bundle.

 #-# Version
   The user-visible version string of the application (e.g., "1.14").

 #-# Build Version
   The internal build or bundle version (e.g., "329").

   ~Contents~@Contents@

@Tips
$^#OpenWith plugin#
$^#Version 1.0#
$^#Copyright (C) 2025 spnethw#
$^#Tips for use and usefulness#
    For a quick access, you can use a macro, for example, to access via "#≣ Menu#"/"#Apps#" key:

    In #far2l# add to the #~~/.config/far2l/settings/key_macros.ini# the following lines:
 #[KeyMacros/Shell/Apps]#
 #Description=OpenWith Plugin for current file#
 #DisableOutput=0x1#
 #Sequence=F11 O#

    In #far2m# in the #~~/.config/far2m/Macros/scripts/# directory the following lines:
 #Macro {#
 # description="OpenWith plugin for current file";#
 # area="Shell"; key="Apps";#
 # action=function() Plugin.Menu(0x93CDEF19) end;#
 #}#
 either place it in a separate file with the #.lua# extension,
 or add it to any existing file with other macros.

    After restarting far2l/far2m the macro will be available for use.

   ~Contents~@Contents@

@Troubleshooting
$^#OpenWith plugin#
$^#Version 1.0#
$^#Copyright (C) 2025 spnethw#
$^#Troubleshooting#

 #Why doesn't my favorite app appear in the list?#

 This can happen for several reasons:

 #-# Incorrect .desktop file: The application's .desktop file might be missing, located in a non-standard directory, or have an incorrect `MimeType=` entry.
 #-# MIME type mismatch: The MIME type detected for the file might not be listed in the application's .desktop file. Check the "MIME type" field in the F3 dialog and compare it with the `MimeType=` line in the app's .desktop file.
 #-# Association is missing: The application is not registered as a handler for this MIME type in any of the mimeapps.list files. You can often fix this using your desktop environment's settings ("Default Applications").
 #-# Filtering options: The "Filter by OnlyShowIn/NotShowIn" or "Validate TryExec" options might be hiding the application. Try disabling them to see if it appears.
 #-# Outdated cache: The system's application or MIME database cache might be out of date. Run appropriate commands in your terminal to regenerate them (for example, "sudo update-mime-database /usr/share/mime" and "sudo update-desktop-database /usr/share/applications").

 #Why is an unexpected MIME type detected for my file?#

 The plugin builds a list of all possible MIME types from every enabled source (xdg-mime, file, extension map). xdg-mime, being the most integrated tool, usually provides the most relevant type, which gets the highest priority. If an incorrect type appears first, it's likely due to a misconfiguration in the system's shared-mime-info database. For diagnosis, you can try disabling the xdg-mime, file and extension map options one by one in the plugin's settings to see how the resulting MIME type list changes.

 #An application is in the list, but it fails to launch.#

 This usually means the `Exec=` line in the application's .desktop file is incorrect or contains field codes that the plugin does not support.
 #-# Press F3 to open the Information Dialog and examine the "Launch command".
 #-# Copy this command and try to run it manually in a terminal. The error message will often reveal the problem.
 #-# Check the application's .desktop file for correctness according to the Freedesktop.org specification.

   ~Contents~@Contents@
